% Learning

clear 
clc
close all
%%
extraInputs = {'interpreter','latex','fontsize',15, 'LineWidth',2.0};
dt = 0.1;  %integration time step 
noise_lvl = 0; %set non-zero (0.1 say) for introducing error to input

%% Oscillator parameters
K = 0.05; kappa = 0.1; alpha = 1.2;
d = 20;
a = diag(sqrt(1:d-1),1);
rho_0 = zeros(d,d);
rho_0(7,7) = 1;
X_hat = a+a';
P_hat =1j*(a-a');

[PV,PD] = eig(P_hat);
PDD = diag(PD);
PD = diag(tanh(PDD));
Observable = PV * PD * PV';


%% Simple supervisor, basic oscillator
load('LargeTdata.mat');
X = X - mean(X);
sup_mg = X(1:floor(.5*length(X))); %Using half of data for training
nt_mg = length(sup_mg);
%% Reservoir's dynamics

chunk_length = 200; %input size at each step
pred_length = 100; %how many samples to predict
N_chunk = floor(nt_mg/chunk_length)-1;
output = zeros(chunk_length, N_chunk);

Y = zeros(N_chunk, pred_length);
for i = 1:N_chunk
    Y(i,:) = sup_mg(i*chunk_length + 1: i*chunk_length + pred_length);
end
Y = Y';
Tspan = (0:chunk_length-1)*dt;


param = [K, kappa, alpha];
for i = 1:N_chunk
    input = sup_mg(1+(i-1)*chunk_length: i*chunk_length) + noise_lvl * randn(chunk_length,1); %picking N_chunk number of samples from the signal
    [T,rho] = ode45(@(t,rho) Quantum_osc(t,rho,Tspan,input,a, param), Tspan, reshape(rho_0,[d^2,1]));
    for j = 1:chunk_length
        D = reshape(rho(j,:), [d,d]);
        output(j,i) = real(trace(D*(Observable)));
    end
end


%% Training

gamma = 0.01;

W = Y * output' /( output * output' + gamma * eye(chunk_length) );
%% Data Reproduction
Train = floor(0.85 * length(X));
test_MG = X(Train+1:length(X));
test = zeros(1,length(test_MG));
test(1:chunk_length) = test_MG(1:chunk_length);

n_chunk = floor((length(test) - chunk_length)/pred_length); % #chunks in test data
if (n_chunk < 10)
   display('Error: Increase Test Length!')
end
for i = 1:10
    output2 = zeros(chunk_length,1);
    input = test(1+(i-1)*pred_length: (i-1) * pred_length + chunk_length) + noise_lvl * randn(1,chunk_length);
    [T,rho] = ode45(@(t,rho) Quantum_osc(t,rho,Tspan,input,a,param), Tspan, reshape(rho_0,[d^2,1]));
        for j = 1:chunk_length
            D = reshape(rho(j,:),[d,d]);
            output2(j) = real(trace(D * (Observable)));
        end
    test((i-1)*pred_length+chunk_length+1: i*pred_length+chunk_length) = W * output2;
end
num_of_datapoints = n_chunk * pred_length + chunk_length;
%%
figure();
time = dt*(1:num_of_datapoints);
plot(time(1:1200),test(1:1200), 'LineWidth', 2.0);
hold on
plot(time(1:1200),test_MG(1:1200),'red' ,'LineWidth', 2.0);
hold on
legend('Produced by reservoir','Actual test data');
line_x = linspace(200*dt,200*dt,10);
line_y = linspace(-.5,.5,10);
plot(line_x,line_y,'--k', 'LineWidth', 1.5);
xlabel('$t (s)$', extraInputs{:});
ylabel('$x(t), \hat x(t)$', extraInputs{:});
hold off
%% Phase Diagrams
delay = 17; %Choose as you wish
out1 = phase_space(test_MG(200:1200),delay);
x = out1(1,:);y=out1(2,:);
out2 = phase_space(test(200:1200),delay);
z = out2(1,:);w=out2(2,:);
figure();
subplot(1,2,1);
plot(x,y, 'LineWidth', 2.0, 'color', [0.25, 0.25, 0.25]);
xlabel('$x(t-1.7)$', extraInputs{:}); ylabel('$x(t)$', extraInputs{:});
%title('Test Phase Space', extraInputs{:});
subplot(1,2,2);
plot(z,w, 'LineWidth', 2.0, 'color', [0.25, 0.25, 0.25]);
xlabel('$\hat x(t-1.7)$', extraInputs{:}); ylabel('$\hat x(t)$', extraInputs{:});
%title('Generated by Reservoir', extraInputs{:});